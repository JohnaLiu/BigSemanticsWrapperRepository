package ecologylab.semantics.generated.library.dlese;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2012) Interface Ecology Lab.
 */

import ecologylab.semantics.generated.library.dlese.DleseRecord2;
import ecologylab.semantics.metadata.builtins.CompoundDocument;
import ecologylab.semantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.semantics.metadata.mm_name;
import ecologylab.semantics.metametadata.MetaMetadataCompositeField;
import ecologylab.semantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_tag;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
@simpl_tag("DDSWebService")
public class DleseGetRecord extends CompoundDocument
{
	@simpl_collection("record")
	@simpl_tag("GetRecord")
	@mm_name("records")
	private List<DleseRecord2> records;

	public DleseGetRecord()
	{ super(); }

	public DleseGetRecord(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<DleseRecord2> getRecords()
	{
		return records;
	}

  // lazy evaluation:
  public List<DleseRecord2> records()
  {
    if (records == null)
      records = new ArrayList<DleseRecord2>();
    return records;
  }

  // addTo:
  public void addToRecords(DleseRecord2 element)
  {
    records().add(element);
  }

  // size:
  public int recordsSize()
  {
    return records == null ? 0 : records.size();
  }

	public void setRecords(List<DleseRecord2> records)
	{
		this.records = records;
	}
}
