package ecologylab.semantics.generated.library.flickr;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2012) Interface Ecology Lab.
 */

import ecologylab.net.ParsedURL;
import ecologylab.semantics.generated.library.flickr.AuthorPhotos;
import ecologylab.semantics.generated.library.flickr.FlickrTagPage;
import ecologylab.semantics.metadata.builtins.CompoundDocument;
import ecologylab.semantics.metadata.builtins.Document;
import ecologylab.semantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.semantics.metadata.mm_name;
import ecologylab.semantics.metadata.scalar.MetadataParsedURL;
import ecologylab.semantics.metadata.scalar.MetadataString;
import ecologylab.semantics.metametadata.MetaMetadataCompositeField;
import ecologylab.semantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_composite;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *A Flickr Image result page
 */ 
@simpl_inherit
public class FlickrPhoto extends CompoundDocument
{
	@simpl_scalar
	private MetadataParsedURL imageLocation;

	@simpl_scalar
	private MetadataString views;

	@simpl_composite
	@mm_name("place")
	private Document place;

	@simpl_collection("flickr_tag_page")
	@mm_name("tags")
	private List<FlickrTagPage> tags;

	@simpl_composite
	@mm_name("author_photos")
	private AuthorPhotos authorPhotos;

	public FlickrPhoto()
	{ super(); }

	public FlickrPhoto(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataParsedURL	imageLocation()
	{
		MetadataParsedURL	result = this.imageLocation;
		if (result == null)
		{
			result = new MetadataParsedURL();
			this.imageLocation = result;
		}
		return result;
	}

	public ParsedURL getImageLocation()
	{
		return this.imageLocation == null ? null : imageLocation().getValue();
	}

	public MetadataParsedURL getImageLocationMetadata()
	{
		return imageLocation;
	}

	public void setImageLocation(ParsedURL imageLocation)
	{
		if (imageLocation != null)
			this.imageLocation().setValue(imageLocation);
	}

	public void setImageLocationMetadata(MetadataParsedURL imageLocation)
	{
		this.imageLocation = imageLocation;
	}

	public MetadataString	views()
	{
		MetadataString	result = this.views;
		if (result == null)
		{
			result = new MetadataString();
			this.views = result;
		}
		return result;
	}

	public String getViews()
	{
		return this.views == null ? null : views().getValue();
	}

	public MetadataString getViewsMetadata()
	{
		return views;
	}

	public void setViews(String views)
	{
		if (views != null)
			this.views().setValue(views);
	}

	public void setViewsMetadata(MetadataString views)
	{
		this.views = views;
	}

	public Document getPlace()
	{
		return place;
	}

	public void setPlace(Document place)
	{
		this.place = place;
	}

	public List<FlickrTagPage> getTags()
	{
		return tags;
	}

  // lazy evaluation:
  public List<FlickrTagPage> tags()
  {
    if (tags == null)
      tags = new ArrayList<FlickrTagPage>();
    return tags;
  }

  // addTo:
  public void addToTags(FlickrTagPage element)
  {
    tags().add(element);
  }

  // size:
  public int tagsSize()
  {
    return tags == null ? 0 : tags.size();
  }

	public void setTags(List<FlickrTagPage> tags)
	{
		this.tags = tags;
	}

	public AuthorPhotos getAuthorPhotos()
	{
		return authorPhotos;
	}

	public void setAuthorPhotos(AuthorPhotos authorPhotos)
	{
		this.authorPhotos = authorPhotos;
	}
}
