package ecologylab.semantics.generated.library.wikipedia;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2012) Interface Ecology Lab.
 */

import ecologylab.semantics.generated.library.wikipedia.Category;
import ecologylab.semantics.generated.library.wikipedia.Paragraph;
import ecologylab.semantics.generated.library.wikipedia.Thumbinner;
import ecologylab.semantics.metadata.builtins.CompoundDocument;
import ecologylab.semantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.semantics.metadata.mm_name;
import ecologylab.semantics.metametadata.MetaMetadataCompositeField;
import ecologylab.semantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** 
 *An article on wikipedia
 */ 
@simpl_inherit
public class WikipediaPageType extends CompoundDocument
{
	/** 
	 *Paragraphs in the article.
	 */ 
	@simpl_collection("paragraph")
	@mm_name("paragraphs")
	private List<Paragraph> paragraphs;

	/** 
	 *Wikipedia Categories
	 */ 
	@simpl_collection("category")
	@mm_name("categories")
	private List<Category> categories;

	@simpl_collection("thumbinner")
	@mm_name("thumbinners")
	private List<Thumbinner> thumbinners;

	public WikipediaPageType()
	{ super(); }

	public WikipediaPageType(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public List<Paragraph> getParagraphs()
	{
		return paragraphs;
	}

  // lazy evaluation:
  public List<Paragraph> paragraphs()
  {
    if (paragraphs == null)
      paragraphs = new ArrayList<Paragraph>();
    return paragraphs;
  }

  // addTo:
  public void addToParagraphs(Paragraph element)
  {
    paragraphs().add(element);
  }

  // size:
  public int paragraphsSize()
  {
    return paragraphs == null ? 0 : paragraphs.size();
  }

	public void setParagraphs(List<Paragraph> paragraphs)
	{
		this.paragraphs = paragraphs;
	}

	public List<Category> getCategories()
	{
		return categories;
	}

  // lazy evaluation:
  public List<Category> categories()
  {
    if (categories == null)
      categories = new ArrayList<Category>();
    return categories;
  }

  // addTo:
  public void addToCategories(Category element)
  {
    categories().add(element);
  }

  // size:
  public int categoriesSize()
  {
    return categories == null ? 0 : categories.size();
  }

	public void setCategories(List<Category> categories)
	{
		this.categories = categories;
	}

	public List<Thumbinner> getThumbinners()
	{
		return thumbinners;
	}

  // lazy evaluation:
  public List<Thumbinner> thumbinners()
  {
    if (thumbinners == null)
      thumbinners = new ArrayList<Thumbinner>();
    return thumbinners;
  }

  // addTo:
  public void addToThumbinners(Thumbinner element)
  {
    thumbinners().add(element);
  }

  // size:
  public int thumbinnersSize()
  {
    return thumbinners == null ? 0 : thumbinners.size();
  }

	public void setThumbinners(List<Thumbinner> thumbinners)
	{
		this.thumbinners = thumbinners;
	}
}
