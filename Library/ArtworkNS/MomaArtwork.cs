//
// MomaArtwork.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2012 Interface Ecology Lab. 
//


using Ecologylab.Collections;
using Ecologylab.Semantics.Generated.Library.ArtworkNS;
using Ecologylab.Semantics.MetaMetadataNS;
using Ecologylab.Semantics.MetadataNS;
using Ecologylab.Semantics.MetadataNS.Builtins;
using Ecologylab.Semantics.MetadataNS.Scalar;
using Simpl.Fundamental.Generic;
using Simpl.Fundamental.Net;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Ecologylab.Semantics.Generated.Library.ArtworkNS 
{
	[SimplInherit]
	public class MomaArtwork : Artwork
	{
		[SimplScalar]
		private MetadataString status;

		[SimplComposite]
		[MmName("moma_department")]
		private CompoundDocument momaDepartment;

		[SimplComposite]
		[MmName("moma_classification")]
		private CompoundDocument momaClassification;

		[SimplScalar]
		private MetadataParsedURL permalink;

		[SimplScalar]
		private MetadataParsedURL databaseLink;

		[SimplScalar]
		private MetadataString momaId;

		[SimplScalar]
		private MetadataParsedURL imageUrl;

		[SimplComposite]
		[MmName("temp_field_value_holder")]
		private TempFieldValueHolder tempFieldValueHolder;

		public MomaArtwork()
		{ }

		public MomaArtwork(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString Status
		{
			get{return status;}
			set
			{
				if (this.status != value)
				{
					this.status = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public CompoundDocument MomaDepartment
		{
			get{return momaDepartment;}
			set
			{
				if (this.momaDepartment != value)
				{
					this.momaDepartment = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public CompoundDocument MomaClassification
		{
			get{return momaClassification;}
			set
			{
				if (this.momaClassification != value)
				{
					this.momaClassification = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataParsedURL Permalink
		{
			get{return permalink;}
			set
			{
				if (this.permalink != value)
				{
					this.permalink = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataParsedURL DatabaseLink
		{
			get{return databaseLink;}
			set
			{
				if (this.databaseLink != value)
				{
					this.databaseLink = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataString MomaId
		{
			get{return momaId;}
			set
			{
				if (this.momaId != value)
				{
					this.momaId = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public MetadataParsedURL ImageUrl
		{
			get{return imageUrl;}
			set
			{
				if (this.imageUrl != value)
				{
					this.imageUrl = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}

		public TempFieldValueHolder TempFieldValueHolder
		{
			get{return tempFieldValueHolder;}
			set
			{
				if (this.tempFieldValueHolder != value)
				{
					this.tempFieldValueHolder = value;
					// TODO we need to implement our property change notification mechanism.
				}
			}
		}
	}
}
