//
// Watchyoutubevideo.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2012 Interface Ecology Lab. 
//


using Simpl.Fundamental.Generic;
using Simpl.Fundamental.Net;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;
using ecologylab.collections;
using ecologylab.semantics.generated.library.videos;
using ecologylab.semantics.metadata;
using ecologylab.semantics.metadata.builtins;
using ecologylab.semantics.metadata.scalar;
using ecologylab.semantics.metametadata;

namespace ecologylab.semantics.generated.library.videos 
{
	/// <summary>
	/// youtube video details
	/// </summary>
	[SimplInherit]
	public class Watchyoutubevideo : CompoundDocument
	{
		/// <summary>
		/// Date on which video is uploaded
		/// </summary>
		[SimplScalar]
		private MetadataString date;

		/// <summary>
		/// author of video
		/// </summary>
		[SimplScalar]
		private MetadataString author;

		/// <summary>
		/// link to auther detail
		/// </summary>
		[SimplScalar]
		private MetadataParsedURL authorlink;

		/// <summary>
		/// video details
		/// </summary>
		[SimplScalar]
		private MetadataString details;

		/// <summary>
		/// list of tags
		/// </summary>
		[SimplCollection("document")]
		[MmName("tag")]
		private List<Document> tag;

		/// <summary>
		/// video License
		/// </summary>
		[SimplScalar]
		private MetadataString license;

		/// <summary>
		/// top 2 comments if any
		/// </summary>
		[SimplCollection("comment_result")]
		[MmName("top_commet")]
		private List<CommentResult> topCommet;

		/// <summary>
		/// total no of comment recived
		/// </summary>
		[SimplScalar]
		private MetadataString noOfComment;

		/// <summary>
		/// total no of likes recived
		/// </summary>
		[SimplScalar]
		private MetadataString likes;

		/// <summary>
		/// total no of dislikes recived
		/// </summary>
		[SimplScalar]
		private MetadataString dislikes;

		/// <summary>
		/// total no of views
		/// </summary>
		[SimplScalar]
		private MetadataString viewCount;

		[SimplScalar]
		private MetadataParsedURL imageLocation;

		public Watchyoutubevideo()
		{ }

		public Watchyoutubevideo(MetaMetadataCompositeField mmd) : base(mmd) { }


		public MetadataString Date
		{
			get{return date;}
			set
			{
				if (this.date != value)
				{
					this.date = value;
					this.RaisePropertyChanged( () => this.Date );
				}
			}
		}

		public MetadataString Author
		{
			get{return author;}
			set
			{
				if (this.author != value)
				{
					this.author = value;
					this.RaisePropertyChanged( () => this.Author );
				}
			}
		}

		public MetadataParsedURL Authorlink
		{
			get{return authorlink;}
			set
			{
				if (this.authorlink != value)
				{
					this.authorlink = value;
					this.RaisePropertyChanged( () => this.Authorlink );
				}
			}
		}

		public MetadataString Details
		{
			get{return details;}
			set
			{
				if (this.details != value)
				{
					this.details = value;
					this.RaisePropertyChanged( () => this.Details );
				}
			}
		}

		public List<Document> Tag
		{
			get{return tag;}
			set
			{
				if (this.tag != value)
				{
					this.tag = value;
					this.RaisePropertyChanged( () => this.Tag );
				}
			}
		}

		public MetadataString License
		{
			get{return license;}
			set
			{
				if (this.license != value)
				{
					this.license = value;
					this.RaisePropertyChanged( () => this.License );
				}
			}
		}

		public List<CommentResult> TopCommet
		{
			get{return topCommet;}
			set
			{
				if (this.topCommet != value)
				{
					this.topCommet = value;
					this.RaisePropertyChanged( () => this.TopCommet );
				}
			}
		}

		public MetadataString NoOfComment
		{
			get{return noOfComment;}
			set
			{
				if (this.noOfComment != value)
				{
					this.noOfComment = value;
					this.RaisePropertyChanged( () => this.NoOfComment );
				}
			}
		}

		public MetadataString Likes
		{
			get{return likes;}
			set
			{
				if (this.likes != value)
				{
					this.likes = value;
					this.RaisePropertyChanged( () => this.Likes );
				}
			}
		}

		public MetadataString Dislikes
		{
			get{return dislikes;}
			set
			{
				if (this.dislikes != value)
				{
					this.dislikes = value;
					this.RaisePropertyChanged( () => this.Dislikes );
				}
			}
		}

		public MetadataString ViewCount
		{
			get{return viewCount;}
			set
			{
				if (this.viewCount != value)
				{
					this.viewCount = value;
					this.RaisePropertyChanged( () => this.ViewCount );
				}
			}
		}

		public MetadataParsedURL ImageLocation
		{
			get{return imageLocation;}
			set
			{
				if (this.imageLocation != value)
				{
					this.imageLocation = value;
					this.RaisePropertyChanged( () => this.ImageLocation );
				}
			}
		}
	}
}
