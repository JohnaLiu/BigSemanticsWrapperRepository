//
// EmergentEventCollection.cs
// s.im.pl serialization
//
// Generated by MetaMetadataDotNetTranslator.
// Copyright 2012 Interface Ecology Lab. 
//


using Simpl.Fundamental.Generic;
using Simpl.Serialization;
using Simpl.Serialization.Attributes;
using System;
using System.Collections;
using System.Collections.Generic;
using crit.semantics.generated.txtf1.fieldreports.emergent_event;
using ecologylab.collections;
using ecologylab.semantics.metadata;
using ecologylab.semantics.metadata.builtins;
using ecologylab.semantics.metadata.scalar;
using ecologylab.semantics.metametadata;

namespace crit.semantics.generated.txtf1.fieldreports.emergent_event 
{
	/// <summary>
	/// a collection of emergent events
	/// </summary>
	[SimplInherit]
	public class EmergentEventCollection : Metadata
	{
		[SimplCollection("emergent_event")]
		[MmName("emergent_events")]
		private List<EmergentEvent> emergentEvents;

		[SimplScalar]
		private MetadataFloat version;

		[SimplScalar]
		private MetadataFloat metadataVersion;

		public EmergentEventCollection()
		{ }

		public EmergentEventCollection(MetaMetadataCompositeField mmd) : base(mmd) { }


		public List<EmergentEvent> EmergentEvents
		{
			get{return emergentEvents;}
			set
			{
				if (this.emergentEvents != value)
				{
					this.emergentEvents = value;
					this.RaisePropertyChanged( () => this.EmergentEvents );
				}
			}
		}

		public MetadataFloat Version
		{
			get{return version;}
			set
			{
				if (this.version != value)
				{
					this.version = value;
					this.RaisePropertyChanged( () => this.Version );
				}
			}
		}

		public MetadataFloat MetadataVersion
		{
			get{return metadataVersion;}
			set
			{
				if (this.metadataVersion != value)
				{
					this.metadataVersion = value;
					this.RaisePropertyChanged( () => this.MetadataVersion );
				}
			}
		}
	}
}
