package ecologylab.semantics.generated.library.ieeeXplore;

/**
 * Automatically generated by MetaMetadataJavaTranslator
 *
 * DO NOT modify this code manually: All your changes may get lost!
 *
 * Copyright (2013) Interface Ecology Lab.
 */

import ecologylab.semantics.generated.library.scholarlyArticle.ScholarlyArticle;
import ecologylab.semantics.metadata.builtins.CompoundDocument;
import ecologylab.semantics.metadata.builtins.MetadataBuiltinsTypesScope;
import ecologylab.semantics.metadata.mm_name;
import ecologylab.semantics.metadata.scalar.MetadataString;
import ecologylab.semantics.metametadata.MetaMetadataCompositeField;
import ecologylab.semantics.namesandnums.SemanticsNames;
import ecologylab.serialization.annotations.simpl_collection;
import ecologylab.serialization.annotations.simpl_inherit;
import ecologylab.serialization.annotations.simpl_scalar;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@simpl_inherit
public class IeeeXploreCitations extends CompoundDocument
{
	@simpl_scalar
	private MetadataString ieeeXploreId;

	@simpl_collection("scholarly_article")
	@mm_name("citations")
	private List<ScholarlyArticle> citations;

	public IeeeXploreCitations()
	{ super(); }

	public IeeeXploreCitations(MetaMetadataCompositeField mmd) {
		super(mmd);
	}


	public MetadataString	ieeeXploreId()
	{
		MetadataString	result = this.ieeeXploreId;
		if (result == null)
		{
			result = new MetadataString();
			this.ieeeXploreId = result;
		}
		return result;
	}

	public String getIeeeXploreId()
	{
		return this.ieeeXploreId == null ? null : ieeeXploreId().getValue();
	}

	public MetadataString getIeeeXploreIdMetadata()
	{
		return ieeeXploreId;
	}

	public void setIeeeXploreId(String ieeeXploreId)
	{
		if (ieeeXploreId != null)
			this.ieeeXploreId().setValue(ieeeXploreId);
	}

	public void setIeeeXploreIdMetadata(MetadataString ieeeXploreId)
	{
		this.ieeeXploreId = ieeeXploreId;
	}

	public List<ScholarlyArticle> getCitations()
	{
		return citations;
	}

  // lazy evaluation:
  public List<ScholarlyArticle> citations()
  {
    if (citations == null)
      citations = new ArrayList<ScholarlyArticle>();
    return citations;
  }

  // addTo:
  public void addToCitations(ScholarlyArticle element)
  {
    citations().add(element);
  }

  // size:
  public int citationsSize()
  {
    return citations == null ? 0 : citations.size();
  }

	public void setCitations(List<ScholarlyArticle> citations)
	{
		this.citations = citations;
	}
}
